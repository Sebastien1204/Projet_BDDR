#!/bin/env python3

  def compar(self):   #Compare les doi sur metadata et les thematiques
        for i in range(len(self.titre)):
            if "doi.org" in self.titre[i][3]:
                seq = self.titre[i][3].split("/")
                j = 0
                while not "10." in seq[j] :
                    j += 1
                s = "/".join(seq[j:])
            if s in self.liste_doi:
                self.titre[i].append(s)
            else:
                self.titre[i].append("")


    def ajoute(self):
        df = pd.read_csv(self.path + '/data_sans_doublons_titre.csv', low_memory = False)
        Theme =[]
        Sous_Theme = []
        M = []
        print(len(self.titre))
        for i in range(len(self.titre)):
            if self.titre[i][4] != "":
                M.append(self.titre[i])
        print(len(M))
        for i in range(len(df['doi'])):
            if i%10000 == 0:
                print(i)
            k = 0
            for j in range(len(M)):
                if df['doi'][i] == M[j][4]:
                    Theme.append(M[j][0])
                    Sous_Theme.append(M[j][1])
                    print(i)
                    print(M[j])
                    del M[j]
                    k = 1
                    break
            if k == 0:
                Theme.append("Inconnu")
                Sous_Theme.append("Inconnu")
        
        df1 = pd.DataFrame([row  for row in Theme],columns = ["thematique"])
        df2 = pd.DataFrame([row for row in Sous_Theme],columns = ["sous-thematique"])
        data = pd.concat([df1,df2,df],axis = 1)
        data_final = data.drop(["who_covidence_id","cord_uid","sha","pmcid","pubmed_id","license","abstract","authors","mag_id","arxiv_id","s2_id"], axis=1)
        data_final.to_csv(self.path + '/data_final.csv',index=False)  
            
