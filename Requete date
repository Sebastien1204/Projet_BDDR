def index61(request):
    all_dates = dates.objects.all()
    dates_qs = all_dates
    for i in dict (request.GET):
        if i == 'date_debut':
            date_debut = request.GET.get('date_debut')
            date_fin = request.GET.get('date_fin')

    format1 = "%Y-%m-%d"
    format2 = "%Y-%m"
    format3 = "%Y"

    if (len(date_debut) > 7):
        date_1 = datetime.strptime(date_debut, format1)
    elif(len(date_debut) <= 7 and len(date_debut) > 4):
        date_1 = datetime.strptime(date_debut, format2)
    else :
        date_1 = datetime.strptime(date_debut, format3)

    if (len(date_fin) > 7):
        date_2 = datetime.strptime(date_fin, format1)
    elif(len(date_fin) <= 7 and len(date_fin) > 4):
        date_2 = datetime.strptime(date_fin, format2)
        date_2.replace(month = date_2.month + 1, day = date_2.days -1 )
    else :
        date_2 = datetime.strptime(date_fin, format3)
        date_2.replace(year = date_2.year + 1, day = date_2.days -1 )


    liste_dates_dans_base_de_donnees = []

    for i in range(dates.objects.count()):
        liste_dates_dans_base_de_donnees.append(dates.objects.values_list('date')[i][0])



    intervalle_jour = (date_2 - date_1).days + 1
    liste_quantites_intervalle = []

    if (len(date_debut) > 7):
        liste_dates_intervalle = []
        for i in range(intervalle_jour):
            jour = date_1 + timedelta(i)
            liste_dates_intervalle.append(datetime.strftime(jour, format1))
            if(jour in liste_dates_dans_base_de_donnees):
                liste_quantites_intervalle.append(dates_qs.get(date=jour).quantite)
            else:
                liste_quantites_intervalle.append(0)

    elif(len(date_debut) <= 7 and len(date_debut) > 4):
        intervalle = date_2.month - date_1.month + 1
        liste_dates_intervalle = []
        liste_dates_intervalle.append(date_debut)
        for i in range(1,intervalle):
            date = datetime.strptime(liste_dates_intervalle[i-1], format2)
            if(date.month >= 12):
                a = date.replace(year=date.year+1,month=1)
            else :
                a = date.replace(month=date.month+1)
            liste_dates_intervalle.append(datetime.strftime(a, format2))
        liste_quantites_intervalle = [0] * intervalle
        k = -1
        for i in range(intervalle_jour):
            jour = date_1 + timedelta(i)
            if jour.days == 1:
                k+=1
            if(jour in liste_dates_dans_base_de_donnees):
                liste_quantites_intervalle[k] += dates_qs.get(date=jour).quantite


    else :
        intervalle = date_2.year - date_1.year + 1
        liste_dates_intervalle = []
        for i in range(intervalle):
            liste_dates_intervalle.append(datetime.strftime(date_1 + timedelta(366*i), format3))
        liste_quantites_intervalle = [0] * intervalle
        k=-1
        for i in range(intervalle_jour):
            jour = date_1 + timedelta(i)
            if jour.days == 1:
                k+=1
            if(jour in liste_dates_dans_base_de_donnees):
                liste_quantites_intervalle[k] += dates_qs.get(date=jour).quantite

    dates_qs = dates_qs.filter(Q(Q(date__in=liste_dates_intervalle)))

    dates_qs = dates_qs.order_by('date')


    a = plt.bar(liste_dates_intervalle,liste_quantites_intervalle)
    plt.xlabel('Dates')
    plt.ylabel("Nombre d'articles")
    plt.title("Histogramme d'articles par date")
    ax = plt.gca()
    ax.axes.xaxis.set_visible(False)

    buffer = BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    image_png = buffer.getvalue()
    buffer.close()

    data_uri = base64.b64encode(image_png).decode('utf-8')
    img_tag = f'<img src="data:image/png;base64,{data_uri}"/>'

    return render(request, 'resultat_date_histogramme.html', {'img_tag': img_tag})
